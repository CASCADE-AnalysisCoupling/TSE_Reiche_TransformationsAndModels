/**
 */
package edu.kit.kastel.sdq.coupling.models.joanascar.provider;

import edu.kit.kastel.sdq.coupling.models.joanascar.util.JoanascarAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class JoanascarItemProviderAdapterFactory extends JoanascarAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public JoanascarItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.joanascar.SourceCodeAnalysisResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceCodeAnalysisResultItemProvider sourceCodeAnalysisResultItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.joanascar.SourceCodeAnalysisResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceCodeAnalysisResultAdapter() {
		if (sourceCodeAnalysisResultItemProvider == null) {
			sourceCodeAnalysisResultItemProvider = new SourceCodeAnalysisResultItemProvider(this);
		}

		return sourceCodeAnalysisResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.joanascar.Parameter_SCAR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Parameter_SCARItemProvider parameter_SCARItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.joanascar.Parameter_SCAR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameter_SCARAdapter() {
		if (parameter_SCARItemProvider == null) {
			parameter_SCARItemProvider = new Parameter_SCARItemProvider(this);
		}

		return parameter_SCARItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.joanascar.Field_SCAR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Field_SCARItemProvider field_SCARItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.joanascar.Field_SCAR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createField_SCARAdapter() {
		if (field_SCARItemProvider == null) {
			field_SCARItemProvider = new Field_SCARItemProvider(this);
		}

		return field_SCARItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.joanascar.Level_SCAR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Level_SCARItemProvider level_SCARItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.joanascar.Level_SCAR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLevel_SCARAdapter() {
		if (level_SCARItemProvider == null) {
			level_SCARItemProvider = new Level_SCARItemProvider(this);
		}

		return level_SCARItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.joanascar.EntryPoint_SCAR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntryPoint_SCARItemProvider entryPoint_SCARItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.joanascar.EntryPoint_SCAR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntryPoint_SCARAdapter() {
		if (entryPoint_SCARItemProvider == null) {
			entryPoint_SCARItemProvider = new EntryPoint_SCARItemProvider(this);
		}

		return entryPoint_SCARItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.joanascar.Flow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowItemProvider flowItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.joanascar.Flow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowAdapter() {
		if (flowItemProvider == null) {
			flowItemProvider = new FlowItemProvider(this);
		}

		return flowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.joanascar.Source} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceItemProvider sourceItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.joanascar.Source}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSourceAdapter() {
		if (sourceItemProvider == null) {
			sourceItemProvider = new SourceItemProvider(this);
		}

		return sourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.joanascar.Sink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SinkItemProvider sinkItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.joanascar.Sink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSinkAdapter() {
		if (sinkItemProvider == null) {
			sinkItemProvider = new SinkItemProvider(this);
		}

		return sinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (sourceCodeAnalysisResultItemProvider != null)
			sourceCodeAnalysisResultItemProvider.dispose();
		if (parameter_SCARItemProvider != null)
			parameter_SCARItemProvider.dispose();
		if (field_SCARItemProvider != null)
			field_SCARItemProvider.dispose();
		if (level_SCARItemProvider != null)
			level_SCARItemProvider.dispose();
		if (entryPoint_SCARItemProvider != null)
			entryPoint_SCARItemProvider.dispose();
		if (flowItemProvider != null)
			flowItemProvider.dispose();
		if (sourceItemProvider != null)
			sourceItemProvider.dispose();
		if (sinkItemProvider != null)
			sinkItemProvider.dispose();
	}

}
