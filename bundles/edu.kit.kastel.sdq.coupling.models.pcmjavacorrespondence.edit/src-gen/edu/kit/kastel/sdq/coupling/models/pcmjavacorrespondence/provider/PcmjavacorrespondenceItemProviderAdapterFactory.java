/**
 */
package edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.provider;

import edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.util.PcmjavacorrespondenceAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PcmjavacorrespondenceItemProviderAdapterFactory extends PcmjavacorrespondenceAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PcmjavacorrespondenceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.PCMJavaCorrespondenceRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMJavaCorrespondenceRootItemProvider pcmJavaCorrespondenceRootItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.PCMJavaCorrespondenceRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMJavaCorrespondenceRootAdapter() {
		if (pcmJavaCorrespondenceRootItemProvider == null) {
			pcmJavaCorrespondenceRootItemProvider = new PCMJavaCorrespondenceRootItemProvider(this);
		}

		return pcmJavaCorrespondenceRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.BasicComponent2Class} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicComponent2ClassItemProvider basicComponent2ClassItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.BasicComponent2Class}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicComponent2ClassAdapter() {
		if (basicComponent2ClassItemProvider == null) {
			basicComponent2ClassItemProvider = new BasicComponent2ClassItemProvider(this);
		}

		return basicComponent2ClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.OperationInterface2Interface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationInterface2InterfaceItemProvider operationInterface2InterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.OperationInterface2Interface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationInterface2InterfaceAdapter() {
		if (operationInterface2InterfaceItemProvider == null) {
			operationInterface2InterfaceItemProvider = new OperationInterface2InterfaceItemProvider(this);
		}

		return operationInterface2InterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.CompositeDataType2Class} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeDataType2ClassItemProvider compositeDataType2ClassItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.CompositeDataType2Class}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeDataType2ClassAdapter() {
		if (compositeDataType2ClassItemProvider == null) {
			compositeDataType2ClassItemProvider = new CompositeDataType2ClassItemProvider(this);
		}

		return compositeDataType2ClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.ProvidedOperationSignature2JavaMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProvidedOperationSignature2JavaMethodItemProvider providedOperationSignature2JavaMethodItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.ProvidedOperationSignature2JavaMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProvidedOperationSignature2JavaMethodAdapter() {
		if (providedOperationSignature2JavaMethodItemProvider == null) {
			providedOperationSignature2JavaMethodItemProvider = new ProvidedOperationSignature2JavaMethodItemProvider(
					this);
		}

		return providedOperationSignature2JavaMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.ProvidedSignature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProvidedSignatureItemProvider providedSignatureItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.ProvidedSignature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProvidedSignatureAdapter() {
		if (providedSignatureItemProvider == null) {
			providedSignatureItemProvider = new ProvidedSignatureItemProvider(this);
		}

		return providedSignatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.ProvidedParameterIdentification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProvidedParameterIdentificationItemProvider providedParameterIdentificationItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.ProvidedParameterIdentification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProvidedParameterIdentificationAdapter() {
		if (providedParameterIdentificationItemProvider == null) {
			providedParameterIdentificationItemProvider = new ProvidedParameterIdentificationItemProvider(this);
		}

		return providedParameterIdentificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.PCMParameter2JavaParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMParameter2JavaParameterItemProvider pcmParameter2JavaParameterItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.sdq.coupling.models.pcmjavacorrespondence.PCMParameter2JavaParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMParameter2JavaParameterAdapter() {
		if (pcmParameter2JavaParameterItemProvider == null) {
			pcmParameter2JavaParameterItemProvider = new PCMParameter2JavaParameterItemProvider(this);
		}

		return pcmParameter2JavaParameterItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (pcmJavaCorrespondenceRootItemProvider != null)
			pcmJavaCorrespondenceRootItemProvider.dispose();
		if (basicComponent2ClassItemProvider != null)
			basicComponent2ClassItemProvider.dispose();
		if (operationInterface2InterfaceItemProvider != null)
			operationInterface2InterfaceItemProvider.dispose();
		if (compositeDataType2ClassItemProvider != null)
			compositeDataType2ClassItemProvider.dispose();
		if (providedOperationSignature2JavaMethodItemProvider != null)
			providedOperationSignature2JavaMethodItemProvider.dispose();
		if (providedSignatureItemProvider != null)
			providedSignatureItemProvider.dispose();
		if (providedParameterIdentificationItemProvider != null)
			providedParameterIdentificationItemProvider.dispose();
		if (pcmParameter2JavaParameterItemProvider != null)
			pcmParameter2JavaParameterItemProvider.dispose();
	}

}
